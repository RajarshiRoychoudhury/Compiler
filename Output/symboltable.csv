				
				
|LEXEME|	|TOKEN|	|ROW|	|COLUMN|	|SCOPE|
				
void	void	0	4	0
main	main	0	9	0
(	(	0	9	0
char	char	0	14	0
c	id	0	16	0
,	,	0	16	0
string	string	0	24	0
s	id	0	26	0
)	)	0	26	0
{	{	0	27	1
{	{	1	5	2
char	char	2	13	2
x	id	2	15	2
=	equals	2	16	2
'1'	charToken	2	20	2
;	;	2	21	2
s	id	3	10	2
=	equals	3	11	2
abc	stringToken	3	17	2
;	;	3	18	2
{	{	4	9	3
{	{	5	13	4
while	while	6	22	4
(	(	6	22	4
'a'	charToken	6	25	4
<	lessthan	6	28	4
'z'	charToken	6	31	4
)	)	6	32	4
{	{	6	33	5
}	}	8	17	4
}	}	9	13	3
}	}	10	9	2
{	{	11	9	3
{	{	12	13	4
{	{	13	17	5
while	while	14	26	5
(	(	14	26	5
abc	stringToken	14	31	5
<	lessthan	14	34	5
xyz	stringToken	14	39	5
)	)	14	40	5
{	{	14	41	6
string	string	15	31	6
p	id	15	33	6
=	equals	15	34	6
123	stringToken	15	40	6
;	;	15	41	6
}	}	16	21	5
}	}	17	17	4
}	}	18	13	3
}	}	19	9	2
string	string	20	15	2
py	id	20	18	2
=	equals	20	19	2
s	id	20	22	2
;	;	20	22	2
while	while	21	14	2
(	(	21	14	2
y	id	21	16	2
<	lessthan	21	18	2
z	id	21	20	2
)	)	21	20	2
{	{	21	21	3
while	while	22	18	3
(	(	22	18	3
z	id	22	20	3
<	lessthan	22	21	3
'a'	charToken	22	23	3
)	)	22	24	3
{	{	22	25	4
++	increment	23	18	4
y	id	23	19	4
;	;	23	19	4
c	id	24	18	4
=	equals	24	19	4
'a'	charToken	24	23	4
+	+	24	25	4
c	id	24	26	4
;	;	24	26	4
while	while	25	22	4
(	(	25	22	4
a	id	25	24	4
>=	greaterthanequals	25	25	4
aaczx	stringToken	25	31	4
)	)	25	32	4
{	{	25	33	5
y	id	26	22	5
=	equals	26	23	5
y	id	26	26	5
-	-	26	27	5
'4'	charToken	26	29	5
;	;	26	30	5
}	}	27	17	4
while	while	28	22	4
(	(	28	22	4
c	id	28	24	4
<	lessthan	28	25	4
d	id	28	26	4
)	)	28	26	4
{	{	28	27	5
c	id	29	22	5
=	equals	29	23	5
c	id	29	26	5
+	+	29	27	5
abcd	stringToken	29	32	5
;	;	29	33	5
}	}	30	17	4
string	string	31	23	4
d	id	31	25	4
=	equals	31	26	4
e	id	31	29	4
+	+	31	30	4
Efgh	stringToken	31	35	4
+	+	31	37	4
exyz	stringToken	31	42	4
;	;	31	43	4
}	}	32	13	3
char	char	33	17	3
y	id	33	19	3
=	equals	33	20	3
'y'	charToken	33	24	3
;	;	33	25	3
z	id	34	14	3
=	equals	34	15	3
hh	stringToken	34	20	3
;	;	34	21	3
}	}	35	9	2
}	}	36	5	1
}	}	37	1	0